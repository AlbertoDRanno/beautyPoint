    //  ctrl + k    luego   ctrl + c
    //  ctrl + u para descomentaar

    consumirAPI: async (req, res) => {
    //realizo un pedido asíncrono, y fetch es un método que tiene 2 promesas:
    //la 1era, es la consulta al endpoint - entre los ( ), paso la URL de la API que quiero cosumir
    fetch("https://randomuser.me/api/?results=100") //&gender=female
      //la 2da, es la promesa que devuelve ese endpoint, que aún se tiene que resolver - y pido que la entregue en formato JSON
      .then((response) => response.json())
      //una vez se resuelva esta promesa, voy a obtener la info
      .then((usuarios) => {
        //a partir de aquí es donde puedo trabajar con lo que me llega de la API
        //return res.json(usuarios.results); //- si quisiera enviar a un endpoint la info de la API
        //si quiero enviarla a una vista:
        return res.render("api.ejs", { usuarios: usuarios.results });
      })
      .catch((err) => res.send(err));
    }

listarUsuarios: (req, res) => {
  db.User.findAll()
    .then((users) => {
      //return res.send(users)
      let respuesta = {
        metaData: {
          status: 200, //todo funciona ok
          total: users.length, //cantidad total de registros publicados
          url: "/api/users/",
        },
        data: users // acá le envío lo que trajo la promesa
      } // pero esta respuesta yo no la estoy enviando a una vista, sino que la quiero enviar en formato json a un endpoint
      res.json(respuesta)
    })
    .catch((err) => {
      res.send(err);
    });
},
  (
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
  );

 /*
            <option value="categoria-1" <%= locals.oldData && oldData.category === "categoria-1" ? "selected" : " " ; %>>Cuidados básicos</option>
            <option value="categoria-2" <%= locals.oldData && oldData.category === "categoria-2" ? "selected" : " " ; %>>Antiage</option>
            <option value="categoria-3" <%= locals.oldData && oldData.category === "categoria-3" ? "selected" : " " ; %>>Solares</option>
            <option value="categoria-4" <%= locals.oldData && oldData.category === "categoria-4" ? "selected" : " " ; %>>Maquillaje</option>
 
 <select name="category" id="product_category" required>
          <option value="categoria-1" <%= (products.category == "categoria-1") ? "selected" : "";%>>Cuidados básicos
          </option>
          <option value="categoria-2" <%= (products.category == "categoria-2") ? "selected" : "";%>>Antiage</option>
          <option value="categoria-3" <%= (products.category == "categoria-3") ? "selected" : "";%>>Solares</option>
          <option value="categoria-4" <%= (products.category == "categoria-4") ? "selected" : "";%>>Maquillaje</option>
        </select>
        <span class="feedback"></span>*/
/*

      search: (req, res) => {
    let loQueBuscoElUsuario = req.query.keywords.toLowerCase();
    let products = productsModel.readJsonFile();
    console.log(loQueBuscoElUsuario);
    let productsResults = [];
    for (let i = 0; i < products.length; i++) {
      console.log("entró al FOR");
      if (products[i].name.toLowerCase().includes(loQueBuscoElUsuario)) {
        productsResults.push(products[i]);
      }
    }
    res.status(200).render("results", {
      productsResults,
      toThousand,
    });
  }
 
 
 
 router.get("/pruebaSession", function (req, res) {
    if (req.session.numeroVisitas === undefined) {
      req.session.numeroVisitas = 0; //si no existe lo inica en 0
    }
    req.session.numeroVisitas++;
    res.send("Session tiene el nro: " + req.session.numeroVisitas);
  });
router.get("/mostrarNumeroSession", function (req, res) {
  res.send("Session tiene el nro: " + req.session.numeroVisitas);
});

const bcryptjs = require("bcryptjs");

let hash = bcryptjs.hashSync("abc123", 10); // encripta el texto con el agregado de sal (+ encriptado), siempre "10"
console.log(hash);
console.log(bcryptjs.compareSync("abc123", hash));
// compara encriptado con texto plano (el texto "hash" debe haber sido encriptado previamente)

//Testing the connection sequelize
try {
  await sequelize.authenticate();
  console.log("Connection has been established successfully.");
} catch (error) {
  console.error("Unable to connect to the database:", error);
}

*/


