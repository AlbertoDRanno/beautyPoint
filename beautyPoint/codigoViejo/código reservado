    //  ctrl + k    luego   ctrl + c
    //  ctrl + u para descomentaar






      <main class="cart-main">
        <table class="cart-table">
          <thead>
            <tr class="carrito-HeaderCompras carrito-Row">
              <td class="carrito-Column First"><span>Producto </span></td>
              <td class="carrito-Column"><span>Cantidad</span></td>
              <td class="carrito-Column"><span>Valor</span></td>
              <td class="carrito-Column"><span>Total</span></td>
              <td class="carrito-Column"></td>
            </tr>
          </thead>
          <tbody>

            <% for (let i=0; i < cart.length; i++) { %>
              <tr class="carrito-Row carrito-BodyCompras">
                <td class="carrito-Column First">
                  <img class="carrito-ProductImage" src="<%=cart[i].image%>" />
                  <h5>
                    <%= cart[i].name%>
                    
                  </h5>
                </td>
                <td class="carrito-Column carrito-Cantidad-Container">
                  <form id= "btnRest-<%= cart[i].id %>" action="/products/cart/update/<%= cart[i].id %>?_method=PUT" method="POST">
                    <input name="cantidad" type="hidden" value="<%=parseInt( cart[i].cantidad) - 1 %>">                    
                    <button type="submit" form="btnRest-<%= cart[i].id %>" <%=parseInt( cart[i].cantidad) === 1?"disabled": "" %>> - </button>
                  </form>
                  <input value="<%=cart[i].cantidad%>" type="number" min="1" max="100" disabled />
                  <form id= "btnAdd-<%= cart[i].id %>" action="/products/cart/update/<%= cart[i].id %>?_method=PUT" method="POST">
                    <input name="cantidad" type="hidden" value="<%= parseInt(cart[i].cantidad )+ 1 %>">
                    <button type="submit" form="btnAdd-<%= cart[i].id %>"> + </button>
                  </form>
                </td>
                <td class="carrito-Column">

                <span>$<%=cart[i].price%></span>

                </td>
                <td class="carrito-Column">

                  <span>$<%=cart[i].price*cart[i].cantidad%></span>

                </td>

                <td class="carrito-Column carrito-Trash">
                  <form action="/products/cart/<%=cart[i].id %>?_method=DELETE" method="POST">
                    <button type="submit"><i class="fa-solid fa-trash-can"></i></button>
                  </form>
                </td>
              </tr>
              <% } %>
          </tbody>
        </table>
        <% if (locals.userLogged) { %>
          <form id="buy" action="/users/buy" method="POST">
            <button form="buy" type="submit" value="" class="">
              Comprar
            </button>
          </form>
          <% } %>
      </main>














   <h5 class="card-title"><%= product.name %></h5>
        <p class="card-text"><%= product.description %></p>
        <p class="card-text">$ <%= product.price %></p>
        <p class="card-text"><%= product.packages.description %></p>
    <p class="card-text"><%= product.categories.description %></p>






    consumirAPI: async (req, res) => {
    //realizo un pedido asíncrono, y fetch es un método que tiene 2 promesas:
    //la 1era, es la consulta al endpoint - entre los ( ), paso la URL de la API que quiero cosumir
    fetch("https://randomuser.me/api/?results=100") //&gender=female
      //la 2da, es la promesa que devuelve ese endpoint, que aún se tiene que resolver - y pido que la entregue en formato JSON
      .then((response) => response.json())
      //una vez se resuelva esta promesa, voy a obtener la info
      .then((usuarios) => {
        //a partir de aquí es donde puedo trabajar con lo que me llega de la API
        //return res.json(usuarios.results); //- si quisiera enviar a un endpoint la info de la API
        //si quiero enviarla a una vista:
        return res.render("api.ejs", { usuarios: usuarios.results });
      })
      .catch((err) => res.send(err));
    }

listarUsuarios: (req, res) => {
  db.User.findAll()
    .then((users) => {
      //return res.send(users)
      let respuesta = {
        metaData: {
          status: 200, //todo funciona ok
          total: users.length, //cantidad total de registros publicados
          url: "/api/users/",
        },
        data: users // acá le envío lo que trajo la promesa
      } // pero esta respuesta yo no la estoy enviando a una vista, sino que la quiero enviar en formato json a un endpoint
      res.json(respuesta)
    })
    .catch((err) => {
      res.send(err);
    });
},
  (
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
  );

 /*
            <option value="categoria-1" <%= locals.oldData && oldData.category === "categoria-1" ? "selected" : " " ; %>>Cuidados básicos</option>
            <option value="categoria-2" <%= locals.oldData && oldData.category === "categoria-2" ? "selected" : " " ; %>>Antiage</option>
            <option value="categoria-3" <%= locals.oldData && oldData.category === "categoria-3" ? "selected" : " " ; %>>Solares</option>
            <option value="categoria-4" <%= locals.oldData && oldData.category === "categoria-4" ? "selected" : " " ; %>>Maquillaje</option>
 
 <select name="category" id="product_category" required>
          <option value="categoria-1" <%= (products.category == "categoria-1") ? "selected" : "";%>>Cuidados básicos
          </option>
          <option value="categoria-2" <%= (products.category == "categoria-2") ? "selected" : "";%>>Antiage</option>
          <option value="categoria-3" <%= (products.category == "categoria-3") ? "selected" : "";%>>Solares</option>
          <option value="categoria-4" <%= (products.category == "categoria-4") ? "selected" : "";%>>Maquillaje</option>
        </select>
        <span class="feedback"></span>*/
/*

      search: (req, res) => {
    let loQueBuscoElUsuario = req.query.keywords.toLowerCase();
    let products = productsModel.readJsonFile();
    console.log(loQueBuscoElUsuario);
    let productsResults = [];
    for (let i = 0; i < products.length; i++) {
      console.log("entró al FOR");
      if (products[i].name.toLowerCase().includes(loQueBuscoElUsuario)) {
        productsResults.push(products[i]);
      }
    }
    res.status(200).render("results", {
      productsResults,
      toThousand,
    });
  }
 
 
 
 router.get("/pruebaSession", function (req, res) {
    if (req.session.numeroVisitas === undefined) {
      req.session.numeroVisitas = 0; //si no existe lo inica en 0
    }
    req.session.numeroVisitas++;
    res.send("Session tiene el nro: " + req.session.numeroVisitas);
  });
router.get("/mostrarNumeroSession", function (req, res) {
  res.send("Session tiene el nro: " + req.session.numeroVisitas);
});

const bcryptjs = require("bcryptjs");

let hash = bcryptjs.hashSync("abc123", 10); // encripta el texto con el agregado de sal (+ encriptado), siempre "10"
console.log(hash);
console.log(bcryptjs.compareSync("abc123", hash));
// compara encriptado con texto plano (el texto "hash" debe haber sido encriptado previamente)

//Testing the connection sequelize
try {
  await sequelize.authenticate();
  console.log("Connection has been established successfully.");
} catch (error) {
  console.error("Unable to connect to the database:", error);
}

*/


/*// module.exports = (sequelize, DataTypes) => {
//   let alias = "Cart";
//   let cols = {
//     id: {
//       type: DataTypes.INTEGER,
//       primaryKey: true,
//       autoIncrement: true,
//     },
//     comprador_id: {
//       type: DataTypes.INTEGER,
//       references: {
//         model: "User",
//         key: "id",
//       },
//     },
//     product_id: {
//       type: DataTypes.INTEGER,
//       references: {
//         model: "Product",
//         key: "id",
//       },
//     },
//     quantity: {
//       type: DataTypes.INTEGER,
//     },
//     price: {
//       type: DataTypes.FLOAT,
//     },
//     status: {
//       type: DataTypes.INTEGER,
//     },
//   };
//   let config = {
//     tableName: "cart",
//     timestamps: true,
//   };

//   const Cart = sequelize.define(alias, cols, config);

//   Cart.associate = function (models) {
//     // recibe todos los modelos que tenemos
//     //aquí defino cómo son esas asociaciones
//     Cart.hasMany(models.Product, {
//       // Product porque es el apodo de la tabla, que le puse en el modelo
//       // 1 a Muchos
//       //un carrito tiene muchos productos./ Le digo con que tabla se relaciona
//       as: "productosCart", // un alias para llamar la relación,
//       foreignKey: "product_id", // Cuál es la columna de la bbdd que une a éstas 2 tablas. No importa donde estamos parados
//     });
//     Cart.hasMany(models.User, {
//       // User porque es el apodo de la tabla, que le puse en el modelo
//       // 1 a Muchos
//       //un usuario compra muchos productos./ Le digo con que tabla se relaciona
//       as: "userCart", // un alias para llamar la relación,
//       foreignKey: "comprador_id", // Cuál es la columna de la bbdd que une a éstas 2 tablas. No importa donde estamos parados
//     });
//   };

//   return Cart;
// };*/